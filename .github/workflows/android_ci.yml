# 工作流的名稱，將顯示在 GitHub 的 Actions 分頁
name: Android CI Build and Package

# 定義觸發這個工作流的條件
on:
  push:
    # 當有新的程式碼推送到 'main' 分支時觸發
    branches: [ master ]
  pull_request:
    # 當有針對 'main' 分支的拉取請求時觸發
    branches: [ master ]

# 定義工作流中的工作 (Job)
jobs:
  build:
    runs-on: ubuntu-latest

    # 這裡加入 secrets 的權限，讓工作流能夠讀取 secrets
    # 注意：pull_request 觸發的工作流不會有 secrets 權限，
    # 這是為了安全，避免惡意程式碼讀取你的 secret。
    # 所以我們只在 push 到 main 時才執行 release build
    permissions:
      contents: write # 寫入權限，用於上傳產物

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 這一步是關鍵：將 Base64 字串解碼成 .jks 檔案
      - name: Decode keystore file
        # 這行命令會將 KEYSTORE_BASE64 的值從 Base64 解碼，並存成 release.jks 檔案
        run: echo ${{ secrets.KEYSTORE_BASE64 }} | base64 --decode > app/release.jks

      # 這一步是第二個關鍵：設定環境變數
      # 我們將 secrets 設為環境變數，讓 build.gradle 能讀取
      - name: Set up environment variables
        run: |
          echo "KEYSTORE_FILE_PATH=./app/release.jks" >> $GITHUB_ENV
          echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
          echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> $GITHUB_ENV
          echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> $GITHUB_ENV

      # 現在，我們建構 Release 版本
      - name: Build Release AAB
        # 這裡的命令會生成簽名好的 AAB 檔案
        run: ./gradlew assembleRelease bundleRelease

      - name: Upload Release AAB as artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: app/build/outputs/apk/release/app-release.apk